metadata {
	// Automatically generated. Make future change here.
	definition (name: "Settings Test", namespace: "TLH", author: "Terry Honn", oauth: false) {
		capability "Refresh"
		capability "Polling"
        capability "Switch"
        capability "Switch Level"
	attribute "stepsize", "string"
		command "levelUp"
		command "levelDown"
		command "getLevel"
		command "dimmerOn"
		command "dimmerOff"
    }
    preferences {
		input "stepsize", "number", title: "Step Size", description: "Dimmer Step Size", defaultValue: 10, required: false, displayDuringSetup: true
	}

	tiles {
		standardTile("switch", "device.switch", width: 2, height: 2, canChangeIcon: true) {
			state "off", label: '${name}', action: "switch.on", icon: "st.switches.light.off", backgroundColor: "#ffffff"
            state "on", label: '${name}', action: "switch.off", icon: "st.switches.light.on", backgroundColor: "#79b821"	
		}
        standardTile("refresh", "device.refresh", inactiveLabel: false, decoration: "flat") {
			state "default", action:"refresh.refresh", icon:"st.secondary.refresh"
		}
                
        controlTile("levelSliderControl", "device.level", "slider", height: 1, width: 2, inactiveLabel: false) {
            state "level", action:"switch level.setLevel", unit:"", backgroundColor:"#ffe71e"
        }
        
        valueTile("level", "device.level", inactiveLabel: false, decoration: "flat") {
			state "level", label: '${currentValue}%', action:"refresh"
		}

        standardTile("lUp", "device.switch", inactiveLabel: false,decoration: "flat", canChangeIcon: false) {
                        state "up", label:'', action:"levelUp",icon:"st.illuminance.illuminance.bright"
        }
        
        standardTile("lDown", "device.switch", inactiveLabel: false,decoration: "flat", canChangeIcon: false) {
                        state "down", label:'', action:"levelDown",icon:"st.illuminance.illuminance.light"
        }
	}
	main(["switch"])
    details(["switch","lUp","lDown", "levelSliderControl", "level" ])
}

def initialize() {
	if ( !settings.stepsize )
    	state.stepsize = 10
    else
		state.stepsize = settings.stepsize
    if (!device.currentValue("level"))
    	setLevel(99)
    
    log.debug "Stepsize set at ${state.stepsize}"
}
// parse events into attributes
def parse(description) {
	log.debug "Wink Lightbulb: parse() - $description"
	def results = []
	
    if ( description == "updated" ) //on initial install we are returned just a string
    	return
        
	if (description?.name && description?.value)
	{
		results << sendEvent(name: "${description?.name}", value: "${description?.value}")
	}
}

def setLevel(val){
    if (val < 0){
    	val = 0
    }
    if( val > 99){
    	val = 99
    }
    if (val == 0){ // I liked that 0 = off
    	sendEvent(name:"level",value:val)
    	dimmerOff()
    }
    else
    {
    	//dimmerOn()
        //parent.setLevel(this,val)
        //on(val)
    	sendEvent(name:"level",value:val)
    	sendEvent(name:"switch.setLevel",value:val) // had to add this to work if apps subscribed to
                                                    // setLevel event. "Dim With Me" was one.
    }
	//device.currentValue("level") = val
}

def on(){
	log.debug "in on"
    sendEvent(name:"switch",value:on)
}
def off(){
	log.debug "in off"
    sendEvent(name:"switch",value:off)
}

def dimmerOn() { //made our own, since event was filtered by default on Android
    sendEvent(name:"switch",value:"on")
}

def dimmerOff() { //made our own, since event was filtered by default on Android
    sendEvent(name:"switch",value:"off")
    
}
def levelUp(){
	log.debug "in levelUp, start level is ${device.currentValue("level")}"
    def step = state.stepsize as Integer ?: 10
    def currLevel = device.currentValue("level") as Integer
    def newLevel = (currLevel + step) as Integer
    setLevel(newLevel)
}

def levelDown(){
	log.debug "in levelDown, start level is ${device.currentValue("level")}"
    def step = state.stepsize as Integer ?: 10
    def currLevel = device.currentValue("level") as Integer
    def newLevel = (currLevel - step) as Integer
    setLevel(newLevel)
}
