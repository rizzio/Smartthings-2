/**
 *  OAuth Start
 *
 *  Copyright 2015 Terry Honn
 *
 */
 
import java.text.DecimalFormat
import groovy.json.JsonSlurper

private apiUrl() 			{ "https://winkapi.quirky.com/" }
private getVendorName() 	{ "Quirky Wink" }
private getVendorAuthPath()	{ "https://winkapi.quirky.com/oauth2/authorize?" }
private getVendorTokenPath(){ "https://winkapi.quirky.com/oauth2/token?" }
private getClientId() 		{ "98e54a1472bd52aab93c1c3aa3aaa133" }
private getClientSecret() 	{ "b0f62b8ac73cd6d011de32ce9c3f8dc8" }
private getServerUrl() 		{ "https://graph.api.smartthings.com" }

definition(
    name: "OAuth Start",
    namespace: "TLH",
    author: "Terry Honn",
    description: "oauth start",
    category: "My Apps",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
    page(name: "Credentials", title: "Fetch OAuth2 Credentials", content: "authPage", install: false)
	page(name: "listDevices", title: "Quirky Devices", content: "listDevices", install: true)    
}

def authPage() {
	log.debug "In authPage"
	//if(canInstallLabs()) {
		def description = null
		if (state.access_token == null) {
			log.debug "need to create access token."
			login()
//			createAccessToken()
			description = "Tap to enter Credentials."

//			def redirectUrl = oauthInitUrl()

			return dynamicPage(name: "Credentials", title: "Authorize Connection", nextPage:"listDevices", uninstall: true, install:false) {
				//section { href url:redirectUrl, style:"embedded", required:false, title:"Connect to ${getVendorName()}:", description:description }
			}
		} else {
        
			description = "Tap 'Next' to proceed"

			return dynamicPage(name: "Credentials", title: "Credentials Accepted!", nextPage:"listDevices", uninstall: true, install:false) {
				//section { href url: buildRedirectUrl("receivedToken"), style:"embedded", required:false, title:"${getVendorName()} is now connected to SmartThings!", description:description }
			}
		}
}



def installed() {
	log.debug "Installed with settings: ${settings}"
	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
	unsubscribe()
	initialize()
}

def initialize() {
	if (!state.access_token){
    	login()
        }
    listDevices()
        settings.devices.each {
		def deviceId = settings.devices
		state.deviceDataArr.each {
			if ( it.id == deviceId ) {
            log.debug "got ${it.name} which is ${it.id}"
				switch(it.type) {
					case "light_bulb":
						//log.debug "we have a lightbulbhere"
						//createChildDevice(it.data) //has sub-devices, so we call out to create kids
                        createChildDevice("ChildButton", it.id, it.name, it.label)
						//createWinkSubscription( it.subsPath, it.subsSuff )
						break
   
       }
     }
     }
     }
    // Delete any that are no longer in settings
	def delete = getChildDevices().findAll { !settings.devices?.contains(it.deviceNetworkId) }
    log.debug "deleting ${delete}"
    delete.each() {
        uninstallChildDevice(it)
		deleteChildDevice(it.deviceNetworkId)
    } 
}

def listDevices()
{
	login()
	log.debug "In listDevices"
	def devices = getDeviceList()
	log.debug "Device List = ${devices}"
    log.debug "Settings List = ${settings}"
	dynamicPage(name: "listDevices", title: "Choose devices", install: false) {
		section("Devices") {
			input "devices", "enum", title: "Select Device(s)", required: false, multiple: true, options: devices
		}
	}
}

def getDeviceList(){
	log.debug "In getDeviceList"
	def deviceList = [:]
	state.deviceDataArr = []
	def pollParams = [
    	uri: "https://winkapi.quirky.com",
    	path: "/users/me/wink_devices",
    	//path: "/users/me/light_bulbs",
    	headers: ["Content-Type": "text/json", "Authorization": "Bearer ${state.access_token}"],
    	query: [format: 'json', body: jsonRequestBody]]
    httpGet(pollParams) { resp ->
    if (resp.data) {
        if(resp.status == 200) {
        resp.data.data.each() {
        if ( it.light_bulb_id ) {
         		deviceList["${it.light_bulb_id}"] = it.name
				state.deviceDataArr.push(['name'  : it.name,
										 'id'     : it.light_bulb_id,
										 'type'   : "light_bulb",
										 'serial' : it.serial,
										 'data'   : it,
										 'subsSuff': "/light_bulbCallback",
										 'subsPath': "/light_bulbs/${it.light_bulb_id}/subscriptions"
				])
            }
          }
    }
        else {
        log.error "polling children & got http status ${resp.status}"
    }
}
	
}
	return deviceList
}

def createChildDevice(deviceFile, dni, name, label)
{
	log.debug "In createChildDevice"
	try {
		def existingDevice = getChildDevice(dni)
        log.debug "existingDevice = ${existingDevice}"
		if(!existingDevice) {
			log.debug "Creating child"
			def childDevice = addChildDevice(app.namespace, deviceFile, dni, null, [name: name, label: label, completedSetup: true])
			log.debug "Child created"
        } else {
			log.debug "Device $dni already exists"
		}
	} 
    catch (e) {
		log.error "Error creating device: ${e}"
	}
}
def on(childDevice)
{
	log.debug "start of on"
    //trytoturnon(childDevice,state.access_token)
    apiPut("/light_bulbs/" + childDevice.device.deviceNetworkId, [desired_state: [powered : true]]) { response ->
		def data = response.data.data
    //apiPut("/light_bulbs/" + childDevice.device.deviceNetworkId, [powered : true]) { response ->
	//	def data = response.data.data
	//	log.debug "Sending 'on' to device"
		dolog(data)
    }
}

def off(childDevice)
{
	//log.debug "start of off"
    //trytoturnoff(childDevice.device.deviceNetworkId
    def values = ['desired_state': ['brightness': 0.7, 'powered': true ]]
	 apiPut("/light_bulbs/" + childDevice.device.deviceNetworkId, [desired_state: [powered : false]]) { response ->
		def data = response.data.data
   		log.debug "Sending 'off' to device"
        dolog(data)
	}
}

def dolog(datatolog)
{
log.debug datatolog
}

def trytoturnon(bulb_id, access_token){
	log.debug 'trying to turn off bulb ' + bulb_id
     def values = ['desired_state': ['brightness': 0.7, 'powered': true ]]
	httpPutJson([
		uri : "https://winkapi.quirky.com",
		path: "/light_bulbs/${bulb_id}",
        body: values,
		headers: [ "Authorization" : "Bearer ${state.access_token}"]
		])
		{response ->log.debug response.data}

	}
 


def apiPut(String path, cmd, Closure callback)
{
log.debug "command: " + apiUrl() + path + cmd
	httpPutJson([
		uri : apiUrl(),
		path: path,
		body: cmd,
		headers : [ 'Authorization' : 'Bearer ' + state.access_token ]
	],)

		{
			response ->
				callback.call(response)
		}
}



def apiGet(String path, Closure callback)
{
	log.debug "accesstoken:${state.access_token}"
	httpGet([
		uri : apiUrl(),
		path : path,
		headers : [ 'Authorization' : 'Bearer ' + state.access_token ]
	],)
		{
			response ->
				callback.call(response)
		}
}










//******************BELOW IS AUTH STUFF*****************************************
def emptyHeaders = [:]
      emptyHeaders."Content-Type" = "application/json"  
def login(){
		def clientid = ("98e54a1472bd52aab93c1c3aa3aaa133");
		def clientsecret = ("b0f62b8ac73cd6d011de32ce9c3f8dc8");
		def username = ("terryhonn@gmail.com");
		def password = ("May102014");
		def mystring = "{\"client_id\":\"" + clientid + "\",\"client_secret\":\"" + clientsecret + "\",\"username\":\"" + username + "\",\"password\":\"" + password + "\",\"grant_type\":\"password\"}";
		def jsonObj = new JsonSlurper().parseText(mystring)
        
 	def loginParams = [
		uri: 'https://winkapi.quirky.com/',
		path: '/oauth2/token',
		headers: ['Content-Type':'application/json'],
		requestContentType: 'application/json',
		body: ['client_id': clientid, 'client_secret': clientsecret, 'username': username, 'password' : password, 'grant_type':'password']
	]

	def result = [success:false]

	httpPost(loginParams) { resp ->
        if (resp.data.access_token){
        		state.access_token = resp.data.access_token
				log.debug "access_token obtained: ${state.access_token}"
 	      }
          else
          {
          log.debug "access_token was null"
          }
        }
	}
	return result

